package pdbCreation;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;

import pdbCreation.aminoacid.AminoAcid;
import pdbCreation.aminoacid.Atom;
import pdbCreation.aminoacid.Connection;
import pdbCreation.aminoacid.Coords;
import pdbCreation.aminoacid.aminoacids.*;


/**
 * PDB Creator
 * 
 * This class reads in the coordinates sent from the gui, and for each coordinates, 
 * it creates an amino acid of that type at (approximately) that position. Many alterations 
 * are made to make the resulting structure look more realistic. Structures generated
 * however, still have no guarantee of their realism. Structures are designated by x, y, z 
 * coordinates which are printed to a protein data base file, that jmol can read, and then 
 * display the resulting molecule.
 * @author Aaron Germuth
 *
 */
public class PDBCreator {
	/**
	 * File writer used to create the pdb file
	 */
	private PDBWriter pdbWriter;
	/**
	 * Array of coordinates, designating where each amino acid is located
	 */
	private Coords[] coords;
	/**
	 * Array of characters, holding the one letter abbreviation for each amino acid in the folded sequence
	 */
	private String[] aminoAcids;
	/**
	 * The current atom number being printed to the pdb file. Need to keep track of this to arrange all connections
	 */
	private int atomNumber;
	/**
	 * Map from amino acid to the rotation object on that amino acid, if any. Rotation objects are set in 
	 * setCoords based off of the directions
	 */
	private HashMap<Integer, RotationParameter> aaToRotation;
	/**
	 * The protein data base file we are writing to
	 * @param args
	 */
	private File pdbFile;
	
	/**
	 * Main method for debugging purposes
	 * @param args
	 */
	public static void main(String[] args){
		String[] seq = {"L"};
		PDBCreator p = new PDBCreator("", seq);
		p.makePDB();
		
	}
	
	/**
	 * Default Constructor called from gui.java
	 * @param dir, the directions given from the gui. In the format of
	 * r - right
	 * l - left
	 * i - in
	 * o - out
	 * u - up
	 * d - down
	 * This string will have a length one less than the number of amino acids, as you only need one direction
	 * for every peptide bond in the polypeptide
	 * @param sequence, sequence of strings, containing which amino acid were originally placed in simulation. 
	 * Amino acids are specified using their one letter abbreviation in a string
	 * Phenylalanine = "F"
	 * Tyrosine = "Y"
	 * etc.
	 */
	public PDBCreator(String dir, String[] sequence){
		this.aaToRotation = new HashMap<Integer, RotationParameter>();
		this.atomNumber = 1;
		this.coords = new Coords[sequence.length];
		//this method positions and rotates all amino acids if needed
		setCoords(dir);
		
		this.aminoAcids = sequence;
		AminoAcid.setNumAminoAcids(this.coords.length);
		
		//debuggan
		System.out.println("Directions recieved: " + dir);
	}
	

	/**
	 * Creates a pdb file based off of this.coords and this.aminoAcids
	 */
	public void makePDB() {
		
		try {
			//Create file object
			this.pdbFile = new File("preprotein.pdb");
			//if it doesn't already exist, create it
			this.pdbFile.createNewFile();
			if(this.pdbFile.exists()){
				System.out.println("EXISTS");
			}
			//create file writer
			this.pdbWriter = new PDBWriter("preprotein.pdb");
			
			//print Header, author and compound tags
			printTitles();
			
			//print atoms and connect tags
			printAtoms();
			
			//print end tag
			printEnd();
			
			//close filewriter so progress is saved
			pdbWriter.close();
			
			PDBEditor e = new PDBEditor(this.coords.length);
			e.edit();
			pdbFile = e.getFile();
			
		} 
		catch (IOException e) {
			System.err.println("Error in writing to protein.pdb");
			e.printStackTrace();
		}
		
	}


	/**
	 * Prints the Header, Compound, and Author tags of the pdb file
	 * @throws IOException
	 */
	private void printTitles() throws IOException {
		printHeader();
		printCompound();
		printAuthor();
	}

	/**
	 * Print Header tag of pdb
	 * @throws IOException
	 */
	private void printHeader() throws IOException {
		pdbWriter.print("HEADER AMINO ACID");
	}
	
	/**
	 * Print Compound tag of pdb
	 * @throws IOException
	 */
	private void printCompound() throws IOException {
		pdbWriter.print("COMPOUND UNKNOWN");
		
	}
	
	/**
	 * Print author tag of pdb
	 * @throws IOException
	 */
	private void printAuthor() throws IOException {
		pdbWriter.print("AUTHOR GENERATED BY AARON GERMUTH AND LEE FOSTER");
	}

	/**
	 * Print atom and connect tags of protein database file
	 * @throws IOException
	 */
	private void printAtoms() throws IOException {
		//saves the last carbon atom number. Used to connect two adjacent amino 
		//acids together. Is -1 for the first iteration
		int carbonAtom = -1;
		//for each coordinate given
		for(int i = 0; i < this.coords.length; i++){

			Coords coords = this.coords[i];
			char aminoAcid = this.aminoAcids[i].charAt(0);
			
			//create proper amino acid based off of character given
			//is there a better way to write this...
			AminoAcid AA = null;
			switch (aminoAcid) {
				case 'G':
					AA = new Glycine(coords, atomNumber, i);
					break;
				case 'A':
					AA = new Alanine(coords, atomNumber, i);
					break;
				case 'C':
					AA = new Cysteine(coords, atomNumber, i);
					break;
				case 'S':
					AA = new Serine(coords, atomNumber, i);
					break;
				case 'T':
					AA = new Threonine(coords, atomNumber, i);
					break;
				case 'V':
					AA = new Valine(coords, atomNumber, i);
					break;
				case 'I':
					AA = new Isoleucine(coords, atomNumber, i);
					break;
				case 'L':
					AA = new Leucine(coords, atomNumber, i);
					break;
				case 'M':
					AA = new Methionine(coords, atomNumber, i);
					break;
				case 'F':
					AA = new Phenylalanine(coords, atomNumber, i);
					break;
				case 'Y':
					AA = new Tyrosine(coords, atomNumber, i);
					break;
				case 'W':
					AA = new Tryptophan(coords, atomNumber, i);
					break;
				case 'R':
					AA = new Arginine(coords, atomNumber, i);
					break;
				case 'D':
					AA = new Aspartate(coords, atomNumber, i);
					break;
				case 'N':
					AA = new Asparagine(coords, atomNumber, i);
					break;
				case 'Q':
					AA = new Glutamine(coords, atomNumber, i);
					break;
				case 'E':
					AA = new Glutamate(coords, atomNumber, i);
					break;
				case 'H':
					AA = new Histidine(coords, atomNumber, i);
					break;
				case 'K':
					AA = new Lysine(coords, atomNumber, i);
					break;
				case 'P':
					AA = new Proline(coords, atomNumber, i);
					break;
			}
			
			//if designated to be rotated, then rotate here
			if(this.aaToRotation.containsKey(i)){
				RotationParameter rp = this.aaToRotation.get(i);
				AA.rotate( rp );
			}
			
			//grab atoms from amino acid
			Atom[] atoms = AA.getAtoms();
			
			//create connections
			Connection[] bonds = new Connection[atoms.length];
			//for each atom of amino acid
			for (int j = 0; j < atoms.length; j++) {
				//grab it's connection
				bonds[j] = atoms[j].getConnection();
				
				//print atom tag
				pdbWriter.print(atoms[j].printAtom());
			}
			//print all connection tags for this amino acid
			for (int j = 0; j < bonds.length; j++) {
				pdbWriter.print(bonds[j].printConnection());
			}
			//update current atom number
			this.atomNumber += AA.getNumberAtoms();

			//as long as this isn't the first amino acid
			//connect it to the previous amino acid
			if (carbonAtom != -1) {
				//add connection and print
				Connection together = new Connection(AA.getNitrogenNumber(),
						carbonAtom);
				pdbWriter.print(together.printConnection());
			}
			//grab this amino acids carbon atom for next iteration
			carbonAtom = AA.getAcidCarbonNumber();
		}

	}

	/**
	 * Print end tag of pdb file
	 * @throws IOException
	 */
	private void printEnd() throws IOException {
		this.pdbWriter.print("END");
	}
	
	/**
	 * This method sets the coordinates for all amino acids.
	 * Numbers are hard coded :( based off trial and error.
	 * @param test, the directions to make coordinates off of
	 */
	private void setCoords(String test) {
		
		//if only one amino acid
		if(test.isEmpty()){
			this.coords[0] = new Coords();
			return;
		}
		//first amino acid always at 0 0 0
		this.coords[0] = new Coords(0,0,0);
		Coords lastCoords = this.coords[0];
		
		//and set to r, unless next amino acid is l, then set to l
		//because directions of rl is impossible
		char lastDirection = 'r';
		if(test.length() > 0 && test.charAt(0) == 'l'){
			this.aaToRotation.put(0, new RotationParameter(
					RotationParameter.Y_AXIS, Math.PI));
			lastDirection = 'l';
		}
		
		//gotta be a better way
		//but conference is soon
		for(int i = 0; i < test.length(); i++){
			//if last was right (or left)?
			if(lastDirection == 'r'){
				if (test.charAt(i) == 'i') {
					this.coords[i + 1] = new Coords(lastCoords.getX() + 2,
							lastCoords.getY(), lastCoords.getZ() - 2);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Y_AXIS, Math.PI / 2));
				}
				if (test.charAt(i) == 'o') {
					this.coords[i + 1] = new Coords(lastCoords.getX() + 2,
							lastCoords.getY(), lastCoords.getZ() + 0.750);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Y_AXIS, -Math.PI / 2));
				}
				if (test.charAt(i) == 'r') {
					this.coords[i + 1] = new Coords(lastCoords.getX() + 3,
							lastCoords.getY(), lastCoords.getZ());
				}
				if (test.charAt(i) == 'u') {
					this.coords[i + 1] = new Coords(lastCoords.getX() + 2,
							lastCoords.getY() + 2, lastCoords.getZ() - 1);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Z_AXIS, Math.PI / 2));
				}
				if (test.charAt(i) == 'd') {
					this.coords[i + 1] = new Coords(lastCoords.getX() + 1,
							lastCoords.getY() - 2, lastCoords.getZ() - 1);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Z_AXIS, -Math.PI / 2));
				}
			}
			if(lastDirection == 'l'){
				//OKAY
				if (test.charAt(i) == 'l') {
					this.coords[i + 1] = new Coords(lastCoords.getX() - 3,
							lastCoords.getY(), lastCoords.getZ() + 1);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Y_AXIS, Math.PI));
				}
				//OKAY
				if (test.charAt(i) == 'i') {
					this.coords[i + 1] = new Coords(lastCoords.getX() - 2,
							lastCoords.getY(), lastCoords.getZ() - 1);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Y_AXIS, Math.PI / 2));
				}
				//GOOD
				if (test.charAt(i) == 'o') {
					this.coords[i + 1] = new Coords(lastCoords.getX() - 2,
							lastCoords.getY(), lastCoords.getZ() + 2.5);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Y_AXIS, -Math.PI / 2));
				}
				//GOOD
				if (test.charAt(i) == 'u') {
					this.coords[i + 1] = new Coords(lastCoords.getX() - 1,
							lastCoords.getY() + 2.1, lastCoords.getZ() + 1);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Z_AXIS, Math.PI / 2));
				}
				//GOOD
				if (test.charAt(i) == 'd') {
					this.coords[i + 1] = new Coords(lastCoords.getX() - 2,
							lastCoords.getY() - 2.25, lastCoords.getZ() + 1);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Z_AXIS, -Math.PI / 2));
				}
			}
			if(lastDirection == 'u'){
				//good
				if (test.charAt(i) == 'i') {
					this.coords[i + 1] = new Coords(lastCoords.getX() + 2,
							lastCoords.getY(), lastCoords.getZ() - 2);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Y_AXIS, Math.PI / 2));
				}
				//iffy
				if (test.charAt(i) == 'o') {
					this.coords[i + 1] = new Coords(lastCoords.getX() + 1.5,
							lastCoords.getY(), lastCoords.getZ());
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Y_AXIS, -Math.PI / 2));
				}
				//DONE
				if (test.charAt(i) == 'r') {
					this.coords[i + 1] = new Coords(lastCoords.getX() + 1.750,
							lastCoords.getY() + 0.800, lastCoords.getZ()-1.5);
				}
				//DONE
				if (test.charAt(i) == 'u') {
					this.coords[i + 1] = new Coords(lastCoords.getX()+0.5,
							lastCoords.getY() + 2.5, lastCoords.getZ() - 1.750);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Z_AXIS, Math.PI / 2));
				}
				//good
				if (test.charAt(i) == 'l') {
					this.coords[i + 1] = new Coords(lastCoords.getX() - 2,
							lastCoords.getY(), lastCoords.getZ() - 2);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Y_AXIS, Math.PI));
				}
			}
			if(lastDirection == 'd'){
				if (test.charAt(i) == 'i') {
					this.coords[i + 1] = new Coords(lastCoords.getX() + 2,
							lastCoords.getY() - 2, lastCoords.getZ() - 2);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Y_AXIS, Math.PI / 2));
				}
				if (test.charAt(i) == 'o') {
					this.coords[i + 1] = new Coords(lastCoords.getX() + 1.5,
							lastCoords.getY() - 2, lastCoords.getZ());
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Y_AXIS, -Math.PI / 2));
				}
				//GOOD
				if (test.charAt(i) == 'r') {
					this.coords[i + 1] = new Coords(lastCoords.getX() + 1.750,
							lastCoords.getY() - 2, lastCoords.getZ()-1.5);
				}
				//GOOD
				if (test.charAt(i) == 'd') {
					this.coords[i + 1] = new Coords(lastCoords.getX()+0.5,
							lastCoords.getY() - 2.5, lastCoords.getZ() - 1.750);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Z_AXIS, -Math.PI / 2));
				}
				//GOOD
				if (test.charAt(i) == 'l') {
					this.coords[i + 1] = new Coords(lastCoords.getX() - 2,
							lastCoords.getY() - 2, lastCoords.getZ() - 2);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Y_AXIS, Math.PI));
				}
			}
			if(lastDirection == 'o'){
				//GOOD
				if (test.charAt(i) == 'o') {
					this.coords[i + 1] = new Coords(lastCoords.getX() + 2,
							lastCoords.getY(), lastCoords.getZ() + 2.5);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Y_AXIS, -Math.PI / 2));
				}
				//GOOD
				if (test.charAt(i) == 'r') {
					this.coords[i + 1] = new Coords(lastCoords.getX() + 3,
							lastCoords.getY(), lastCoords.getZ() + 2);
				}
				//GOOD
				if (test.charAt(i) == 'd') {
					this.coords[i + 1] = new Coords(lastCoords.getX()+0.5,
							lastCoords.getY() - 2.25, lastCoords.getZ() + 2);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Z_AXIS, -Math.PI / 2));
				}
				//GOOD
				if (test.charAt(i) == 'u') {
					this.coords[i + 1] = new Coords(lastCoords.getX()+1.5,
							lastCoords.getY() + 2.5, lastCoords.getZ() + 2);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Z_AXIS, Math.PI / 2));
				}
				//GOOD
				if (test.charAt(i) == 'l') {
					this.coords[i + 1] = new Coords(lastCoords.getX() - 1.1,
							lastCoords.getY(), lastCoords.getZ() + 2);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Y_AXIS, Math.PI));
				}
			}
			if(lastDirection == 'i'){
				//GOOD
				if (test.charAt(i) == 'i') {
					this.coords[i + 1] = new Coords(lastCoords.getX(),
							lastCoords.getY(), lastCoords.getZ() - 3);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Y_AXIS, Math.PI / 2));
				}
				//OKAY
				if (test.charAt(i) == 'r') {
					this.coords[i + 1] = new Coords(lastCoords.getX() + 1,
							lastCoords.getY(), lastCoords.getZ() - 2);
				}
				//OKAY
				if (test.charAt(i) == 'd') {
					this.coords[i + 1] = new Coords(lastCoords.getX() - 1.5,
							lastCoords.getY() - 2.25, lastCoords.getZ() - 1.5);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Z_AXIS, -Math.PI / 2));
				}
				//GOOD
				if (test.charAt(i) == 'u') {
					this.coords[i + 1] = new Coords(lastCoords.getX(),
							lastCoords.getY() + 2.0, lastCoords.getZ() - 2);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Z_AXIS, Math.PI / 2));
				}
				//OKAY
				if (test.charAt(i) == 'l') {
					this.coords[i + 1] = new Coords(lastCoords.getX() - 2.1,
							lastCoords.getY(), lastCoords.getZ() - 2);
					this.aaToRotation.put(i + 1, new RotationParameter(
							RotationParameter.Y_AXIS, Math.PI));
				}
			}
			lastCoords = this.coords[i+1];
			lastDirection = test.charAt(i);
		}
		
	}

	/**
	 * Returns the pdb file created. File might be overriden with pdb file created from PDB Editor
	 * @return
	 */
	public File getFile() {
		return pdbFile;
	}
}